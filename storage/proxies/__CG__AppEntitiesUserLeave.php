<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserLeave extends \App\Entities\UserLeave implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'emp_id', 'cl', 'pl', 'sl', 'used_upl', 'employment_started', 'one_year_completed', 'created_at', 'updated_at', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'emp_id', 'cl', 'pl', 'sl', 'used_upl', 'employment_started', 'one_year_completed', 'created_at', 'updated_at', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserLeave $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getUsedUpl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsedUpl', []);

        return parent::getUsedUpl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUsedUpl($used_upl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUsedUpl', [$used_upl]);

        parent::setUsedUpl($used_upl);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmploymentStarted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmploymentStarted', []);

        return parent::getEmploymentStarted();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmploymentStarted($employment_started): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmploymentStarted', [$employment_started]);

        parent::setEmploymentStarted($employment_started);
    }

    /**
     * {@inheritDoc}
     */
    public function getOneYearCompleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOneYearCompleted', []);

        return parent::getOneYearCompleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setOneYearCompleted($one_year_completed): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOneYearCompleted', [$one_year_completed]);

        parent::setOneYearCompleted($one_year_completed);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmpId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmpId', []);

        return parent::getEmpId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCl', []);

        return parent::getCl();
    }

    /**
     * {@inheritDoc}
     */
    public function setCl($cl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCl', [$cl]);

        parent::setCl($cl);
    }

    /**
     * {@inheritDoc}
     */
    public function getPl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPl', []);

        return parent::getPl();
    }

    /**
     * {@inheritDoc}
     */
    public function setPl($pl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPl', [$pl]);

        parent::setPl($pl);
    }

    /**
     * {@inheritDoc}
     */
    public function getSl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSl', []);

        return parent::getSl();
    }

    /**
     * {@inheritDoc}
     */
    public function setSl($sl): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSl', [$sl]);

        parent::setSl($sl);
    }

}
