<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LeaveApplication extends \App\Entities\LeaveApplication implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'user_id', 'leave_type', 'leave_date', 'half_day', 'leave_count', 'status', 'reason', 'final_approve', 'reject_reason', 'created_at', 'updated_at', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'user_id', 'leave_type', 'leave_date', 'half_day', 'leave_count', 'status', 'reason', 'final_approve', 'reject_reason', 'created_at', 'updated_at', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LeaveApplication $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getRejectReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRejectReason', []);

        return parent::getRejectReason();
    }

    /**
     * {@inheritDoc}
     */
    public function setRejectReason($reject_reason): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRejectReason', [$reject_reason]);

        parent::setRejectReason($reject_reason);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getFinalApprove()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinalApprove', []);

        return parent::getFinalApprove();
    }

    /**
     * {@inheritDoc}
     */
    public function setFinalApprove($final_approve): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinalApprove', [$final_approve]);

        parent::setFinalApprove($final_approve);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeave_type()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeave_type', []);

        return parent::getLeave_type();
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveDate', []);

        return parent::getLeaveDate();
    }

    /**
     * {@inheritDoc}
     */
    public function getHalf_day()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHalf_day', []);

        return parent::getHalf_day();
    }

    /**
     * {@inheritDoc}
     */
    public function getReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReason', []);

        return parent::getReason();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeave_type($leave_type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeave_type', [$leave_type]);

        return parent::setLeave_type($leave_type);
    }

    /**
     * {@inheritDoc}
     */
    public function setLeaveDate($leave_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveDate', [$leave_date]);

        return parent::setLeaveDate($leave_date);
    }

    /**
     * {@inheritDoc}
     */
    public function setHalf_day($half_day)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHalf_day', [$half_day]);

        return parent::setHalf_day($half_day);
    }

    /**
     * {@inheritDoc}
     */
    public function setReason($reason)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReason', [$reason]);

        return parent::setReason($reason);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($user_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$user_id]);

        return parent::setUserId($user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeave_count()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeave_count', []);

        return parent::getLeave_count();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeave_count($leave_count)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeave_count', [$leave_count]);

        return parent::setLeave_count($leave_count);
    }

}
