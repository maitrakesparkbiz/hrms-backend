<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Company extends \App\Entities\Company implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'logo', 'logo_url', 'website', 'country', 'contact_email', 'contact_person', 'contact_number', 'contact_address', 'from_email', 'from_name', 'currency', 'datetimeformat', 'currency_symbol', 'timezone', 'financial_year_start_month', 'leave_start_month', 'default_break_time', 'created_at', 'updated_at', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'name', 'logo', 'logo_url', 'website', 'country', 'contact_email', 'contact_person', 'contact_number', 'contact_address', 'from_email', 'from_name', 'currency', 'datetimeformat', 'currency_symbol', 'timezone', 'financial_year_start_month', 'leave_start_month', 'default_break_time', 'created_at', 'updated_at', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Company $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getLogo()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogo', []);

        return parent::getLogo();
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveStartMonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveStartMonth', []);

        return parent::getLeaveStartMonth();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeaveStartMonth($leave_start_month): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveStartMonth', [$leave_start_month]);

        parent::setLeaveStartMonth($leave_start_month);
    }

    /**
     * {@inheritDoc}
     */
    public function getWebsite()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWebsite', []);

        return parent::getWebsite();
    }

    /**
     * {@inheritDoc}
     */
    public function setWebsite($website): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setWebsite', [$website]);

        parent::setWebsite($website);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogo_url()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogo_url', []);

        return parent::getLogo_url();
    }

    /**
     * {@inheritDoc}
     */
    public function getCountry()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCountry', []);

        return parent::getCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function getContact_email()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact_email', []);

        return parent::getContact_email();
    }

    /**
     * {@inheritDoc}
     */
    public function getContact_person()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact_person', []);

        return parent::getContact_person();
    }

    /**
     * {@inheritDoc}
     */
    public function getContact_number()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact_number', []);

        return parent::getContact_number();
    }

    /**
     * {@inheritDoc}
     */
    public function getContact_address()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContact_address', []);

        return parent::getContact_address();
    }

    /**
     * {@inheritDoc}
     */
    public function getFrom_email()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrom_email', []);

        return parent::getFrom_email();
    }

    /**
     * {@inheritDoc}
     */
    public function getFrom_name()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrom_name', []);

        return parent::getFrom_name();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency', []);

        return parent::getCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrency_symbol()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrency_symbol', []);

        return parent::getCurrency_symbol();
    }

    /**
     * {@inheritDoc}
     */
    public function getTimezone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTimezone', []);

        return parent::getTimezone();
    }

    /**
     * {@inheritDoc}
     */
    public function getDatetimeformat()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatetimeformat', []);

        return parent::getDatetimeformat();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatetimeformat($datetimeformat)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatetimeformat', [$datetimeformat]);

        return parent::setDatetimeformat($datetimeformat);
    }

    /**
     * {@inheritDoc}
     */
    public function getFinancial_year_start_month()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFinancial_year_start_month', []);

        return parent::getFinancial_year_start_month();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setLogo($logo)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogo', [$logo]);

        return parent::setLogo($logo);
    }

    /**
     * {@inheritDoc}
     */
    public function setLogo_url($logo_url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogo_url', [$logo_url]);

        return parent::setLogo_url($logo_url);
    }

    /**
     * {@inheritDoc}
     */
    public function setCountry($country)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCountry', [$country]);

        return parent::setCountry($country);
    }

    /**
     * {@inheritDoc}
     */
    public function setContact_email($contact_email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact_email', [$contact_email]);

        return parent::setContact_email($contact_email);
    }

    /**
     * {@inheritDoc}
     */
    public function setContact_person($contact_person)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact_person', [$contact_person]);

        return parent::setContact_person($contact_person);
    }

    /**
     * {@inheritDoc}
     */
    public function setContact_number($contact_number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact_number', [$contact_number]);

        return parent::setContact_number($contact_number);
    }

    /**
     * {@inheritDoc}
     */
    public function setContact_address($contact_address)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContact_address', [$contact_address]);

        return parent::setContact_address($contact_address);
    }

    /**
     * {@inheritDoc}
     */
    public function setFrom_email($from_email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrom_email', [$from_email]);

        return parent::setFrom_email($from_email);
    }

    /**
     * {@inheritDoc}
     */
    public function setFrom_name($from_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrom_name', [$from_name]);

        return parent::setFrom_name($from_name);
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency($currency)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency', [$currency]);

        return parent::setCurrency($currency);
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrency_symbol($currency_symbol)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrency_symbol', [$currency_symbol]);

        return parent::setCurrency_symbol($currency_symbol);
    }

    /**
     * {@inheritDoc}
     */
    public function setTimezone($timezone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTimezone', [$timezone]);

        return parent::setTimezone($timezone);
    }

    /**
     * {@inheritDoc}
     */
    public function setFinancial_year_start_month($financial_year_start_month)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFinancial_year_start_month', [$financial_year_start_month]);

        return parent::setFinancial_year_start_month($financial_year_start_month);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultBreakTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultBreakTime', []);

        return parent::getDefaultBreakTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultBreakTime($default_break_time): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultBreakTime', [$default_break_time]);

        parent::setDefaultBreakTime($default_break_time);
    }

}
