<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User_work_experiance extends \App\Entities\User_work_experiance implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'company_name', 'designation', 'from_date', 'to_date', 'details', 'relieving_letter', 'exp_letter', 'salary_slip', 'user', 'created_at', 'updated_at', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'company_name', 'designation', 'from_date', 'to_date', 'details', 'relieving_letter', 'exp_letter', 'salary_slip', 'user', 'created_at', 'updated_at', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User_work_experiance $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getRelievingLetter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRelievingLetter', []);

        return parent::getRelievingLetter();
    }

    /**
     * {@inheritDoc}
     */
    public function setRelievingLetter($relieving_letter): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRelievingLetter', [$relieving_letter]);

        parent::setRelievingLetter($relieving_letter);
    }

    /**
     * {@inheritDoc}
     */
    public function getExpLetter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExpLetter', []);

        return parent::getExpLetter();
    }

    /**
     * {@inheritDoc}
     */
    public function setExpLetter($exp_letter): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExpLetter', [$exp_letter]);

        parent::setExpLetter($exp_letter);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalarySlip()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalarySlip', []);

        return parent::getSalarySlip();
    }

    /**
     * {@inheritDoc}
     */
    public function setSalarySlip($salary_slip): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSalarySlip', [$salary_slip]);

        parent::setSalarySlip($salary_slip);
    }

    /**
     * {@inheritDoc}
     */
    public function getDesignation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDesignation', []);

        return parent::getDesignation();
    }

    /**
     * {@inheritDoc}
     */
    public function getFrom_date()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFrom_date', []);

        return parent::getFrom_date();
    }

    /**
     * {@inheritDoc}
     */
    public function getTo_date()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTo_date', []);

        return parent::getTo_date();
    }

    /**
     * {@inheritDoc}
     */
    public function getDetails()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDetails', []);

        return parent::getDetails();
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function getCompanyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompanyName', []);

        return parent::getCompanyName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompanyName($company_name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompanyName', [$company_name]);

        return parent::setCompanyName($company_name);
    }

    /**
     * {@inheritDoc}
     */
    public function setDesignation($designation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDesignation', [$designation]);

        return parent::setDesignation($designation);
    }

    /**
     * {@inheritDoc}
     */
    public function setFrom_date($from_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFrom_date', [$from_date]);

        return parent::setFrom_date($from_date);
    }

    /**
     * {@inheritDoc}
     */
    public function setTo_date($to_date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTo_date', [$to_date]);

        return parent::setTo_date($to_date);
    }

    /**
     * {@inheritDoc}
     */
    public function setDetails($details)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDetails', [$details]);

        return parent::setDetails($details);
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

}
