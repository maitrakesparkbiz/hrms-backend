<?php

namespace DoctrineProxies\__CG__\App\Entities;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class LeaveApproved extends \App\Entities\LeaveApproved implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'user_id', 'leave_id', 'leave_type', 'leave_date', 'half_day', 'leave_count', 'reason', 'status', 'reject_reason', 'is_deleted', 'created_at', 'updated_at', 'deletedAt'];
        }

        return ['__isInitialized__', 'id', 'user_id', 'leave_id', 'leave_type', 'leave_date', 'half_day', 'leave_count', 'reason', 'status', 'reject_reason', 'is_deleted', 'created_at', 'updated_at', 'deletedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (LeaveApproved $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setLeaveId($leave_id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveId', [$leave_id]);

        parent::setLeaveId($leave_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveId', []);

        return parent::getLeaveId();
    }

    /**
     * {@inheritDoc}
     */
    public function getisDeleted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getisDeleted', []);

        return parent::getisDeleted();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsDeleted($is_deleted): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsDeleted', [$is_deleted]);

        parent::setIsDeleted($is_deleted);
    }

    /**
     * {@inheritDoc}
     */
    public function getRejectReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRejectReason', []);

        return parent::getRejectReason();
    }

    /**
     * {@inheritDoc}
     */
    public function setRejectReason($reject_reason): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRejectReason', [$reject_reason]);

        parent::setRejectReason($reject_reason);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUserId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserId', []);

        return parent::getUserId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUserId($user_id): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUserId', [$user_id]);

        parent::setUserId($user_id);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveType', []);

        return parent::getLeaveType();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeaveType($leave_type): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveType', [$leave_type]);

        parent::setLeaveType($leave_type);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveDate', []);

        return parent::getLeaveDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeaveDate($leave_date): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveDate', [$leave_date]);

        parent::setLeaveDate($leave_date);
    }

    /**
     * {@inheritDoc}
     */
    public function getHalfDay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHalfDay', []);

        return parent::getHalfDay();
    }

    /**
     * {@inheritDoc}
     */
    public function setHalfDay($half_day): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHalfDay', [$half_day]);

        parent::setHalfDay($half_day);
    }

    /**
     * {@inheritDoc}
     */
    public function getLeaveCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLeaveCount', []);

        return parent::getLeaveCount();
    }

    /**
     * {@inheritDoc}
     */
    public function setLeaveCount($leave_count): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLeaveCount', [$leave_count]);

        parent::setLeaveCount($leave_count);
    }

    /**
     * {@inheritDoc}
     */
    public function getReason()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReason', []);

        return parent::getReason();
    }

    /**
     * {@inheritDoc}
     */
    public function setReason($reason): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setReason', [$reason]);

        parent::setReason($reason);
    }

}
